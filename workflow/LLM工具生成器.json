{
  "last_node_id": 8,
  "last_link_id": 7,
  "nodes": [
    {
      "id": 7,
      "type": "load_persona",
      "pos": [
        -29,
        479
      ],
      "size": {
        "0": 315,
        "1": 106
      },
      "flags": {},
      "order": 0,
      "mode": 0,
      "inputs": [
        {
          "name": "file_content",
          "type": "STRING",
          "link": null,
          "widget": {
            "name": "file_content"
          },
          "label": "file_content"
        }
      ],
      "outputs": [
        {
          "name": "system_prompt",
          "type": "STRING",
          "links": [
            6
          ],
          "shape": 3,
          "label": "system_prompt",
          "slot_index": 0
        }
      ],
      "properties": {
        "Node name for S&R": "load_persona"
      },
      "widgets_values": [
        "LLM工具制造机",
        true,
        ""
      ]
    },
    {
      "id": 4,
      "type": "show_text_party",
      "pos": [
        825,
        237
      ],
      "size": {
        "0": 574.8762817382812,
        "1": 870.7109985351562
      },
      "flags": {},
      "order": 4,
      "mode": 0,
      "inputs": [
        {
          "name": "text",
          "type": "STRING",
          "link": 3,
          "widget": {
            "name": "text"
          },
          "label": "text"
        }
      ],
      "outputs": [
        {
          "name": "STRING",
          "type": "STRING",
          "links": null,
          "shape": 6,
          "label": "STRING"
        }
      ],
      "properties": {
        "Node name for S&R": "show_text_party"
      },
      "widgets_values": [
        "",
        "根据查询的结果，我们可以得出地理编码/逆地理编码 API 的基本使用方法。现在，我们将构建一个Python API工具来实现地理编码的查询功能。\n\n```python\nimport requests\n\ndef geocode(address, key):\n    # 地理编码 API URL\n    url = f\"https://restapi.amap.com/v3/geocode/geo?address={address}&key={key}\"\n    # 发送HTTP请求\n    response = requests.get(url)\n    # 解析JSON响应\n    if response.status_code == 200:\n        return response.json()\n    else:\n        return None\n\nclass GeoCodingTool:\n    @classmethod\n    def INPUT_TYPES(s):\n        return {\n            \"required\": {\n                \"address\": (\"STRING\", {\"default\": \"北京市朝阳区阜通东大街6号\"}),\n                \"key\": (\"STRING\", {\"default\": \"your_key_here\"}),\n            }\n        }\n\n    RETURN_TYPES = (\"STRING\",)\n    RETURN_NAMES = (\"tool\",)\n\n    FUNCTION = \"geocode\"\n\n    CATEGORY = \"地理编码工具\"\n\n    def geocode(self, address, key):\n        # 调用地理编码API函数\n        result = geocode(address, key)\n        if result:\n            return (json.dumps(result, ensure_ascii=False),)\n        else:\n            return (None,)\n\nTOOL_HOOKS = [\"geocode\"]\nNODE_CLASS_MAPPINGS = {\"GeoCodingTool\": GeoCodingTool}\nlang = locale.getdefaultlocale()[0]\nif lang == \"zh_CN\":\n    NODE_DISPLAY_NAME_MAPPINGS = {\"GeoCodingTool\": \"地理编码查询工具\"}\nelse:\n    NODE_DISPLAY_NAME_MAPPINGS = {\"GeoCodingTool\": \"Geocoding Query Tool\"}\n```\n\n这段代码定义了一个Python类 `GeoCodingTool`，它提供了地理编码API的封装。函数 `geocode` 负责发送HTTP请求到高德地图的地理编码API，并返回解析后的JSON数据。该工具类还定义了输入类型和返回类型，以在API工具库中使用。"
      ]
    },
    {
      "id": 2,
      "type": "LLM_api_loader",
      "pos": [
        -29,
        270
      ],
      "size": {
        "0": 315,
        "1": 130
      },
      "flags": {},
      "order": 1,
      "mode": 0,
      "outputs": [
        {
          "name": "model",
          "type": "CUSTOM",
          "links": [
            1
          ],
          "shape": 3,
          "label": "model",
          "slot_index": 0
        }
      ],
      "properties": {
        "Node name for S&R": "LLM_api_loader"
      },
      "widgets_values": [
        "gpt-4-turbo",
        "",
        "",
        false
      ]
    },
    {
      "id": 1,
      "type": "LLM",
      "pos": [
        325,
        258
      ],
      "size": {
        "0": 471.9311828613281,
        "1": 584.6425170898438
      },
      "flags": {},
      "order": 3,
      "mode": 0,
      "inputs": [
        {
          "name": "model",
          "type": "CUSTOM",
          "link": 1,
          "label": "model"
        },
        {
          "name": "images",
          "type": "IMAGE",
          "link": null,
          "label": "images"
        },
        {
          "name": "extra_parameters",
          "type": "DICT",
          "link": null,
          "label": "extra_parameters"
        },
        {
          "name": "system_prompt_input",
          "type": "STRING",
          "link": 6,
          "widget": {
            "name": "system_prompt_input"
          },
          "label": "system_prompt_input"
        },
        {
          "name": "user_prompt_input",
          "type": "STRING",
          "link": null,
          "widget": {
            "name": "user_prompt_input"
          },
          "label": "user_prompt_input"
        },
        {
          "name": "tools",
          "type": "STRING",
          "link": 7,
          "widget": {
            "name": "tools"
          },
          "label": "tools"
        },
        {
          "name": "file_content",
          "type": "STRING",
          "link": null,
          "widget": {
            "name": "file_content"
          },
          "label": "file_content"
        }
      ],
      "outputs": [
        {
          "name": "assistant_response",
          "type": "STRING",
          "links": [
            3
          ],
          "shape": 3,
          "label": "assistant_response",
          "slot_index": 0
        },
        {
          "name": "history",
          "type": "STRING",
          "links": null,
          "shape": 3,
          "label": "history"
        },
        {
          "name": "tool",
          "type": "STRING",
          "links": null,
          "shape": 3,
          "label": "tool"
        },
        {
          "name": "image",
          "type": "IMAGE",
          "links": null,
          "shape": 3,
          "label": "image"
        }
      ],
      "properties": {
        "Node name for S&R": "LLM"
      },
      "widgets_values": [
        "",
        "使用checkweb工具查询接口文档后，生成地理编码 API 的代码",
        0.7,
        "disable",
        "disable",
        "disable",
        "enable",
        1920,
        "",
        "",
        "",
        "",
        "",
        100,
        "",
        true
      ]
    },
    {
      "id": 8,
      "type": "check_web_tool",
      "pos": [
        -23,
        705
      ],
      "size": {
        "0": 315,
        "1": 250
      },
      "flags": {},
      "order": 2,
      "mode": 0,
      "inputs": [
        {
          "name": "ebd_model",
          "type": "EBD_MODEL",
          "link": null,
          "label": "ebd_model"
        }
      ],
      "outputs": [
        {
          "name": "tool",
          "type": "STRING",
          "links": [
            7
          ],
          "shape": 3,
          "label": "tool",
          "slot_index": 0
        }
      ],
      "properties": {
        "Node name for S&R": "check_web_tool"
      },
      "widgets_values": [
        true,
        200,
        50,
        "auto",
        "https://lbs.amap.com/api/webservice/guide/api/georegeo",
        "D:\\AI\\mychat\\model\\bge-large-zh",
        false,
        "",
        ""
      ]
    }
  ],
  "links": [
    [
      1,
      2,
      0,
      1,
      0,
      "CUSTOM"
    ],
    [
      3,
      1,
      0,
      4,
      0,
      "STRING"
    ],
    [
      6,
      7,
      0,
      1,
      3,
      "STRING"
    ],
    [
      7,
      8,
      0,
      1,
      5,
      "STRING"
    ]
  ],
  "groups": [],
  "config": {},
  "extra": {
    "ds": {
      "scale": 1.2100000000000002,
      "offset": [
        113.77484351706573,
        -266.0124920007506
      ]
    }
  },
  "version": 0.4
}